package Pieces;

import Game.Board;

//import ChessGame.*;

public class Rook extends Piece{
	
	/**
     * Constructor for Rook.
     * @param x: the x location
     * @param y: the y location
     * @param color: the color of the piece
     */
	public Rook(int x, int y, Color color) {
		super(x, y, color);
		type = Type.rook;
	}
	
	/**
     * Getter for piece type
     * @return return the type of a piece
     */
	public Type getType() {
		return Type.rook;
	}
	
	/**
     * Check if it is valid to move a rook piece to specified location.
     * @param nx : the new x location
     * @param ny : the new y location
     * @return  whether a path is valid 
     */
    public boolean isValidMoveType(Board board, int nx, int ny) {
    	if ((x == nx || y == ny) && isNotBlocked(board,nx,ny)) {
    		return true;
    	}
    	return false;
    }
    
    /**
     * Check if straight move is valid
     * @param board
     * @param toX
     * @param toY
     * @return
     */
    public boolean pieceInWayStraight(Board board, int toX, int toY){
        int directionX = toX > xCoord ? 1 : -1;
        int directionY = toY > yCoord ? 1 : -1;
		
		/* If moving vertically, check if anything in the path*/
        if(xCoord - toX == 0){
            for(int i = 1; i < Math.abs(toX-xCoord)-1; ++i){
                if(board.checkPieceOnBoard(xCoord, yCoord + i*directionY)){
                    return false;
                }
            }
        }
		
		/*if moving horizontally, check if anything in path*/
        if(yCoord - toY == 0){
            for(int i = 1; i< Math.abs(toY-yCoord)-1; ++i){
                if(board.checkPieceOnBoard(xCoord +i*directionX, yCoord)){
                    return false;
                }
            }
        }
        return true;
    }
    
    


}